// WARNING: Do NOT edit the input and output ports in this file in a text
// editor if you plan to continue editing the block that represents it in
// the Block Editor! File corruption is VERY likely to occur.

// Copyright (C) 1991-2005 Altera Corporation
// Any  megafunction  design,  and related netlist (encrypted  or  decrypted),
// support information,  device programming or simulation file,  and any other
// associated  documentation or information  provided by  Altera  or a partner
// under  Altera's   Megafunction   Partnership   Program  may  be  used  only
// to program  PLD  devices (but not masked  PLD  devices) from  Altera.   Any
// other  use  of such  megafunction  design,  netlist,  support  information,
// device programming or simulation file,  or any other  related documentation
// or information  is prohibited  for  any  other purpose,  including, but not
// limited to  modification,  reverse engineering,  de-compiling, or use  with
// any other  silicon devices,  unless such use is  explicitly  licensed under
// a separate agreement with  Altera  or a megafunction partner.  Title to the
// intellectual property,  including patents,  copyrights,  trademarks,  trade
// secrets,  or maskworks,  embodied in any such megafunction design, netlist,
// support  information,  device programming or simulation file,  or any other
// related documentation or information provided by  Altera  or a megafunction
// partner, remains with Altera, the megafunction partner, or their respective
// licensors. No other licenses, including any licenses needed under any third
// party's intellectual property, are provided herein.


// Generated by Quartus II Version 4.2 (Build Build 178 01/19/2005)
// Created on Mon Apr 11 11:30:18 2005

//  Module Declaration
module pwm_10bit
(
	// {{ALTERA_ARGS_BEGIN}} DO NOT REMOVE THIS LINE!
	width, clk, reset, endline, pwm_out
	// {{ALTERA_ARGS_END}} DO NOT REMOVE THIS LINE!
);
// Port Declaration

	// {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
	input [9:0] width;
	input clk;
	input reset;
	output endline;
	output pwm_out;
	// {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!

    reg [9:0] count;
    reg endlinereg;
    reg out;

assign pwm_out = out;
assign endline = endlinereg;

always @(posedge clk)
begin
  if (reset) count=0;
  else
  begin
    if (count<320) 
    begin
      count<=count+1; 
    end
    else 
    begin 
      count<=0;
    end
    if (count<width) out<=1; else out<=0;

// endline goes active on the second last clk. This will enable the state-machine
// to process the new line on the last clock of the old line. The new data will
// be present at the first clock of the new line. 

    if (count==319) endlinereg<=1; else endlinereg<=0; 
 end
end


endmodule
